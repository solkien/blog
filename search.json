[
  {
    "objectID": "posts/00_context-object-pattern/index.html",
    "href": "posts/00_context-object-pattern/index.html",
    "title": "Das Context Design Pattern",
    "section": "",
    "text": "Gruppiert zusammengehängende Parameter oder Zustände in ein Objekt, welches von mehreren Funktionen verwendet wird.\nVorteile:\n\nweniger Funktionsparameter\nleichte Erweiterbarkeit\nmehrere Funktionen können auf die gleichen Infos zugreifen\n\nNachteile:\n\nlow-level Funktionen benötigen nicht den gesamten Kontext\nSchwierig nachzuvollziehen wo Daten evtl. geändert werden\nGod object, Kontext wächst unkrontolliert wenn unbedacht eingesetzt\n\nBest-practice:\n\nKontextobject nur für high-level Orchestration verwenden\nHelferfunktion explizit definieren, nur übergeben was gebraucht wird\ngroße Kontexte aufteilen\nverwende unveränderbare Objekte wo möglich\n\n\nVorher:\ndef preprocess(image, resize_width, resize_height): ...\ndef detect_objects(image, resize_width, resize_height): ...\ndef annotate(image, detections, color, thickness): ...\nRefactor:\n@dataclass\nclass DetectionContext:\n    image: Image\n    resize_width: int = 640\n    resize_height: int = 640\n    processed_image: Image | None = None \n    detections: Detections | None = None\n\nclass ObjectDetector:\n    def _preprocess(self, image, resize_width, resize_height): ...\n    def detect(self, context: DetectionContext): ...\nDie low-level Funktion nutzt explizte Parameter, während die top-level Funktion den vollen Kontext verwendet."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Das Context Design Pattern\n\n\n\ncode\n\ndesign patterns\n\n\n\n\n\n\n\n\n\nOct 31, 2025\n\n\nFR\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]